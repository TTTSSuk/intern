// pages/api/callback.ts
import type { NextApiRequest, NextApiResponse } from 'next';
import clientPromise from '@/lib/mongodb';
import { ObjectId } from 'mongodb';
import path from "path";

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'POST') {
    return (res as any).status(405).json({ status: 'Method not allowed' });
  }

  interface UserDoc {
    _id: ObjectId;
    userId: string;
    tokens: number;
    tokenHistory: TokenEntry[];
  }

  interface TokenEntry {
    date: Date;
    change: number;
    reason: string;
    type: string;
    executionId?: string;
    video?: string;
  }

  interface Clip {
    video?: string;
    finalVideo?: string;
    createdAt: Date;
    tokenDeducted?: boolean;
  }
  
  interface FileDoc {
    _id: ObjectId;
    executionId: string;
    userId: string;
    clips: Clip[];
    status?: string;
    expectedTokens?: number;
  }

  const { executionId, video, resultVideo, status, error } = req.body;
  
  if (!executionId) {
    return (res as any).status(400).json({ status: 'error', message: 'Missing executionId' });
  }

  try {
    const client = await clientPromise;
    const db = client.db('login-form-app');
    const listFileCollection = db.collection<FileDoc>('listfile');
    const userTokensCollection = db.collection<UserDoc>('user_tokens');

    // üî• ‡∏Å‡∏£‡∏ì‡∏µ: ‡∏°‡∏µ video clip ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏´‡∏±‡∏Å token ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)
    if (video) {
      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ document ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ userId
      const fileDoc = await listFileCollection.findOne({ executionId });
      
      if (!fileDoc) {
        return (res as any).status(404).json({ status: 'error', message: 'File document not found' });
      }

      // ‡πÄ‡∏û‡∏¥‡πà‡∏° clip ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
      await listFileCollection.updateOne(
        { executionId },
        {
          $push: { clips: { video, createdAt: new Date(), tokenDeducted: true } },
          $set: { status: 'running' }
        }
      );

      // ‚úÖ ‡∏´‡∏±‡∏Å Token ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏•‡∏¥‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      await userTokensCollection.updateOne(
        { userId: fileDoc.userId },
        {
          $inc: { tokens: -1 },
          $push: {
            tokenHistory: {
              date: new Date(),
              change: -1,
              reason: `‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${path.basename(video)}`,
              type: 'video_creation',
              executionId: executionId,
              video: video
            }
          }
        }
      );
      
      console.log(`‚úÖ Deducted 1 token from user ${fileDoc.userId} for video clip: ${video}`);
    }

    // üî• ‡∏Å‡∏£‡∏ì‡∏µ: ‡∏°‡∏µ final video ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡πÑ‡∏°‡πà‡∏´‡∏±‡∏Å Token ‡πÄ‡∏û‡∏¥‡πà‡∏° - ‡πÄ‡∏õ‡πá‡∏ô bonus)
    if (resultVideo) {
      const fileDoc = await listFileCollection.findOne({ executionId });
      
      if (!fileDoc) {
        return (res as any).status(404).json({ status: 'error', message: 'File document not found' });
      }

      await listFileCollection.updateOne(
        { executionId },
        {
          $push: { clips: { finalVideo: resultVideo, createdAt: new Date() } },
          $set: { status: 'completed' }
        }
      );

      // üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å history ‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ final video ‡πÅ‡∏•‡πâ‡∏ß (‡πÑ‡∏°‡πà‡∏´‡∏±‡∏Å token)
      await userTokensCollection.updateOne(
        { userId: fileDoc.userId },
        {
          $push: {
            tokenHistory: {
              date: new Date(),
              change: 0,
              reason: `‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏£‡∏ß‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`,
              type: 'final_video_completed',
              executionId: executionId
            }
          }
        }
      );

      console.log(`‚úÖ Final video completed for execution ${executionId} - No additional token charged`);
    }

    // üî• ‡∏Å‡∏£‡∏ì‡∏µ: ‡πÄ‡∏Å‡∏¥‡∏î Error (‡πÑ‡∏°‡πà‡∏´‡∏±‡∏Å token ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏∑‡∏ô token ‡∏ñ‡πâ‡∏≤‡∏´‡∏±‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß)
    if (status === 'error' || error) {
      const fileDoc = await listFileCollection.findOne({ executionId });
      
      if (!fileDoc) {
        return (res as any).status(404).json({ status: 'error', message: 'File document not found' });
      }

      // üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á error
      const expectedClips = fileDoc.expectedTokens || 0;
      const successfulClips = fileDoc.clips ? fileDoc.clips.filter(clip => clip.video && clip.tokenDeducted === true) : [];
      const hasAllClips = successfulClips.length === expectedClips;
      const hasFinalVideo = fileDoc.clips ? fileDoc.clips.some(clip => clip.finalVideo) : false;

      let errorType = '';
      let shouldRefund = false;

      if (successfulClips.length === 0) {
        // ‡∏Å‡∏£‡∏ì‡∏µ: ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏•‡∏¥‡∏õ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
        errorType = 'complete_failure';
        shouldRefund = false; // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏´‡∏±‡∏Å‡πÄ‡∏•‡∏¢
      } else if (!hasAllClips) {
        // ‡∏Å‡∏£‡∏ì‡∏µ: ‡∏ö‡∏≤‡∏á‡∏Ñ‡∏•‡∏¥‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏ö‡∏≤‡∏á‡∏Ñ‡∏•‡∏¥‡∏õ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß  
        errorType = 'partial_success';
        shouldRefund = false; // ‡∏´‡∏±‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      } else if (hasAllClips && !hasFinalVideo) {
        // ‡∏Å‡∏£‡∏ì‡∏µ: ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏•‡∏¥‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏ï‡πà final video error
        errorType = 'final_video_error';
        shouldRefund = false; // ‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô token ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏î‡πâ‡∏Ñ‡∏•‡∏¥‡∏õ‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß
      }

      await listFileCollection.updateOne(
        { executionId },
        {
          $set: { 
            status: 'error',
            error: error || 'Unknown error occurred',
            errorType: errorType,
            updatedAt: new Date()
          }
        }
      );

      // üîÑ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô token ‡∏ï‡∏≤‡∏° error type
      if (shouldRefund && successfulClips.length > 0) {
        const tokensToRefund = successfulClips.length;
        
        await userTokensCollection.updateOne(
          { userId: fileDoc.userId },
          {
            $inc: { tokens: tokensToRefund },
            $push: {
              tokenHistory: {
                date: new Date(),
                change: tokensToRefund,
                reason: `‡∏Ñ‡∏∑‡∏ô Token ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (${tokensToRefund} Token)`,
                type: 'refund_final_video_error',
                executionId: executionId
              }
            }
          }
        );

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡πâ clips ‡πÑ‡∏°‡πà‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ token ‡∏ñ‡∏π‡∏Å‡∏´‡∏±‡∏Å‡πÅ‡∏•‡πâ‡∏ß
        await listFileCollection.updateOne(
          { executionId },
          { $set: { "clips.$[elem].tokenDeducted": false } },
          { arrayFilters: [{ "elem.video": { $exists: true } }] }
        );

        console.log(`üîÑ Refunded ${tokensToRefund} tokens to user ${fileDoc.userId} due to final video failure.`);
      } else {
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° history ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô token
        let reasonText = '';
        if (errorType === 'complete_failure') {
          reasonText = '‡∏á‡∏≤‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏´‡∏±‡∏Å Token';
        } else if (errorType === 'partial_success') {
          reasonText = `‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô (${successfulClips.length}/${expectedClips} ‡∏Ñ‡∏•‡∏¥‡∏õ) ‡∏´‡∏±‡∏Å Token ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`;
        } else if (errorType === 'final_video_error') {
          reasonText = `‡∏Ñ‡∏•‡∏¥‡∏õ‡∏¢‡πà‡∏≠‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Ñ‡∏£‡∏ö (${successfulClips.length}/${expectedClips}) ‡πÅ‡∏ï‡πà‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß - ‡∏´‡∏±‡∏Å Token ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ`;
        }

        if (reasonText) {
          await userTokensCollection.updateOne(
            { userId: fileDoc.userId },
            {
              $push: {
                tokenHistory: {
                  date: new Date(),
                  change: 0,
                  reason: reasonText,
                  type: 'partial_completion_note',
                  executionId: executionId
                }
              }
            }
          );
        }
      }

      console.log(`‚ùå Job ${executionId} failed with ${errorType}: ${error}`);
    }

    return (res as any).status(200).json({ status: 'success' });

  } catch (error) {
    console.error('‚ùå Error in callback:', error);
    return (res as any).status(500).json({ status: 'error', message: 'Internal Server Error' });
  }
}
// import type { NextApiRequest, NextApiResponse } from 'next';
// import clientPromise from '@/lib/mongodb';
// import { ObjectId } from 'mongodb'; // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ import ObjectId

// export default async function handler(req: NextApiRequest, res: NextApiResponse) {
//   if (req.method !== 'POST') {
//     return (res as any).status(405).json({ status: 'Method not allowed' });
//   }

//   // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏° interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user document
//   interface UserDoc {
//     _id: ObjectId;
//     userId: string;
//     tokens: number;
//     tokenHistory: TokenEntry[];
//   }

//   // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏° interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö token history
//   interface TokenEntry {
//     date: Date;
//     change: number;
//     reason: string;
//     type: string;
//   }

//   // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï interface ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô DB
//   interface Clip {
//     video?: string;
//     finalVideo?: string;
//     createdAt: Date;
//     tokenDeducted?: boolean; // ‚ö†Ô∏è ‡πÄ‡∏û‡∏¥‡πà‡∏° field ‡∏ô‡∏µ‡πâ
//   }
  
//   // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏° userId ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î clips ‡πÄ‡∏õ‡πá‡∏ô array ‡πÉ‡∏ô interface
//   interface FileDoc {
//     _id: ObjectId;
//     executionId: string;
//     userId: string;
//     clips: Clip[];
//     status?: string;
//   }

//   const { executionId, video, resultVideo } = req.body;
  
//   if (!executionId || (!video && !resultVideo)) {
//     return (res as any).status(400).json({ status: 'error', message: 'Missing required fields' });
//   }

//   try {
//     const client = await clientPromise;
//     const db = client.db('login-form-app');
//     const listFileCollection = db.collection<FileDoc>('listfile');
//     // const usersCollection = db.collection<UserDoc>('users'); // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏Å‡∏≥‡∏´‡∏ô‡∏î type ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
//     const userTokensCollection = db.collection<UserDoc>('user_tokens');

//     if (video) {
//         // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï listfile: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏•‡∏¥‡∏õ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô array 'clips'
//         await listFileCollection.updateOne(
//           { executionId },
//           {
//             $push: { clips: { video, createdAt: new Date(), tokenDeducted: true  } },
//             $set: { status: 'running' }
//           },
//           { upsert: true }
//         );

//         // ‚úÖ ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏Å‡∏≤‡∏£‡∏´‡∏±‡∏Å Token ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
//         const fileDoc = await listFileCollection.findOne({ executionId });
//         if (fileDoc) {
//             await userTokensCollection.updateOne(
//                 { userId: fileDoc.userId },
//                 {
//                     $inc: { tokens: -1 }, // ‡∏´‡∏±‡∏Å Token ‡∏•‡∏á 1
//                     $push: {
//                         tokenHistory: {
//                             date: new Date(),
//                             change: -1,
//                             reason: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
//                             type: 'video_creation'
//                         }
//                     }
//                 }
//             );
//             console.log(`‚úÖ Deducted 1 token from user ${fileDoc.userId} for video clip.`);
//         }
//     }

//     if (resultVideo) {
//       await listFileCollection.updateOne(
//         { executionId },
//         {
//           $push: { clips: { finalVideo: resultVideo, createdAt: new Date() } },
//           $set: { status: 'completed' }
//         },
//         { upsert: true }
//       );
//     }
    
//     return (res as any).status(200).json({ status: 'success' });

//   } catch (error) {
//     console.error('‚ùå Error in callback:', error);
//     return (res as any).status(500).json({ status: 'error', message: 'Internal Server Error' });
//   }
// }